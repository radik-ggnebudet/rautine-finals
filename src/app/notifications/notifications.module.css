.container {
  width: 100%;
  max-width: 430px;
  height: 100vh;
  margin: 0 auto;
  background: linear-gradient(to bottom, #000000 0%, #0a0a0a 100%);
  display: flex;
  flex-direction: column;
  overflow: hidden;
}

/* Header */
.header {
  display: flex;
  align-items: center;
  gap: 16px;
  padding: 54px 20px 20px;
  background: linear-gradient(to bottom, rgba(0,0,0,0.95) 0%, rgba(0,0,0,0) 100%);
  backdrop-filter: blur(20px);
}

.backButton {
  width: 40px;
  height: 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  position: relative;
  flex-shrink: 0;
}

.backButton::before {
  content: '';
  position: absolute;
  inset: 0;
  border-radius: 50%;
  background: rgba(255, 255, 255, 0.05);
  opacity: 0;
  transition: opacity 0.3s ease;
}

.backButton:hover::before {
  opacity: 1;
}

.backButton:hover {
  transform: scale(1.1);
}

.title {
  font-size: 28px;
  font-weight: 700;
  color: #ffffff;
  line-height: 1;
  margin-bottom: 4px;
}

.subtitle {
  font-size: 14px;
  color: #0A84FF;
  font-weight: 600;
}

.markAllButton {
  width: 36px;
  height: 36px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 8px;
  background: rgba(10, 132, 255, 0.15);
  margin-left: auto;
  flex-shrink: 0;
}

/* Filters */
.filters {
  display: flex;
  gap: 8px;
  padding: 0 20px 16px;
  overflow-x: auto;
  scrollbar-width: none;
}

.filters::-webkit-scrollbar {
  display: none;
}

.filterButton {
  padding: 8px 16px;
  background: linear-gradient(135deg, #1C1C1E 0%, #252527 100%);
  border-radius: 12px;
  font-size: 13px;
  font-weight: 600;
  color: #8E8E93;
  white-space: nowrap;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  border: 2px solid transparent;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
}

.filterButton.active {
  background: linear-gradient(135deg, #0A84FF 0%, #0066CC 100%);
  color: #ffffff;
  border-color: #0A84FF;
  box-shadow: 0 4px 16px rgba(10, 132, 255, 0.4);
}

/* Content */
.content {
  flex: 1;
  overflow-y: auto;
  padding: 0 20px 40px;
}

/* Notification Card */
.notificationCard {
  display: flex;
  align-items: flex-start;
  gap: 12px;
  padding: 16px;
  background: linear-gradient(135deg, #1C1C1E 0%, #252527 100%);
  border-radius: 16px;
  margin-bottom: 12px;
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.4);
  border: 2px solid transparent;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  cursor: pointer;
  position: relative;
}

.notificationCard.unread {
  border-color: rgba(10, 132, 255, 0.3);
  background: linear-gradient(135deg, #1C1C1E 0%, #1f1f21 100%);
}

.notificationCard:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.5);
  border-color: rgba(255, 255, 255, 0.1);
}

.notificationIcon {
  width: 44px;
  height: 44px;
  border-radius: 12px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 20px;
  flex-shrink: 0;
  backdrop-filter: blur(10px);
}

.notificationContent {
  flex: 1;
  min-width: 0;
  padding-right: 24px;
}

.notificationHeader {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  gap: 8px;
  margin-bottom: 4px;
}

.notificationTitle {
  font-size: 15px;
  font-weight: 600;
  color: #ffffff;
  line-height: 1.3;
}

.notificationTime {
  font-size: 12px;
  color: #8E8E93;
  white-space: nowrap;
  flex-shrink: 0;
}

.notificationDescription {
  font-size: 13px;
  color: #8E8E93;
  line-height: 1.4;
}

.unreadDot {
  position: absolute;
  top: 16px;
  right: 16px;
  width: 8px;
  height: 8px;
  border-radius: 50%;
  box-shadow: 0 0 8px currentColor;
}

.deleteButton {
  position: absolute;
  top: 12px;
  right: 12px;
  width: 28px;
  height: 28px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 8px;
  background: rgba(0, 0, 0, 0.3);
  opacity: 0;
  transition: opacity 0.2s ease;
}

.notificationCard:hover .deleteButton {
  opacity: 1;
}

.deleteButton:hover {
  background: rgba(255, 59, 48, 0.2);
}

/* Empty State */
.emptyState {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 80px 20px;
  text-align: center;
}

.emptyIcon {
  font-size: 64px;
  margin-bottom: 16px;
  opacity: 0.5;
}

.emptyTitle {
  font-size: 20px;
  font-weight: 700;
  color: #ffffff;
  margin-bottom: 8px;
}

.emptyText {
  font-size: 14px;
  color: #8E8E93;
  line-height: 1.5;
}

/* Settings Button */
.settingsButton {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 10px;
  width: calc(100% - 40px);
  margin: 0 20px 34px;
  padding: 16px;
  background: linear-gradient(135deg, #1C1C1E 0%, #252527 100%);
  border-radius: 12px;
  color: #ffffff;
  font-size: 15px;
  font-weight: 600;
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.4);
  border: 1px solid rgba(255, 255, 255, 0.05);
  transition: all 0.3s ease;
}

.settingsButton:hover {
  background: linear-gradient(135deg, #2C2C2E 0%, #353537 100%);
  box-shadow: 0 6px 24px rgba(0, 0, 0, 0.5);
}

/* Responsive */
@media (max-width: 430px) {
  .container {
    max-width: 100%;
  }
}
'use client'

import { useState } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { useRouter } from 'next/navigation'
import styles from './notifications.module.css'

interface Notification {
  id: number
  type: 'schedule' | 'homework' | 'message' | 'achievement'
  title: string
  description: string
  time: string
  read: boolean
  icon: string
  color: string
}

const initialNotifications: Notification[] = [
  { id: 1, type: 'schedule', title: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏', description: '–õ–µ–∫—Ü–∏—è –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –Ω–∞ 19 –æ–∫—Ç—è–±—Ä—è', time: '5 –º–∏–Ω –Ω–∞–∑–∞–¥', read: false, icon: 'üìÖ', color: '#0A84FF' },
  { id: 2, type: 'homework', title: '–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ', description: '–î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é', time: '1 —á–∞—Å –Ω–∞–∑–∞–¥', read: false, icon: 'üìù', color: '#FF6B9F' },
  { id: 3, type: 'achievement', title: '–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!', description: '–í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–µ–π–¥–∂ "–ö–Ω–∏–∂–Ω—ã–π —á–µ—Ä–≤—å"', time: '2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥', read: false, icon: 'üéâ', color: '#C8FF00' },
  { id: 4, type: 'message', title: '–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', description: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ò–≤–∞–Ω–æ–≤–∞ –ê.–°.', time: '3 —á–∞—Å–∞ –Ω–∞–∑–∞–¥', read: true, icon: 'üí¨', color: '#8B7FFF' },
  { id: 5, type: 'schedule', title: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–Ω—è—Ç–∏–∏', description: '–ß–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–µ–∫—Ü–∏—è –ø–æ —Ñ–∏–∑–∏–∫–µ', time: '–í—á–µ—Ä–∞', read: true, icon: '‚è∞', color: '#FFB76B' },
  { id: 6, type: 'homework', title: '–ü—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –¥–µ–¥–ª–∞–π–Ω', description: '–î–æ —Å–¥–∞—á–∏ –∑–∞–¥–∞–Ω–∏—è –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –æ—Å—Ç–∞–ª–æ—Å—å 2 –¥–Ω—è', time: '–í—á–µ—Ä–∞', read: true, icon: '‚ö†Ô∏è', color: '#FF453A' }
]

export default function NotificationsPage() {
  const router = useRouter()
  const [notifications, setNotifications] = useState<Notification[]>(initialNotifications)
  const [filter, setFilter] = useState<'all' | 'schedule' | 'homework' | 'message' | 'achievement'>('all')

  const filteredNotifications = notifications.filter(n =>
    filter === 'all' ? true : n.type === filter
  )

  const unreadCount = notifications.filter(n => !n.read).length

  const markAsRead = (id: number) => {
    setNotifications(notifications.map(n =>
      n.id === id ? { ...n, read: true } : n
    ))
  }

  const markAllAsRead = () => {
    setNotifications(notifications.map(n => ({ ...n, read: true })))
  }

  const deleteNotification = (id: number) => {
    setNotifications(notifications.filter(n => n.id !== id))
  }

  const getFilterLabel = (type: string) => {
    switch(type) {
      case 'all': return '–í—Å–µ'
      case 'schedule': return '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'
      case 'homework': return '–ó–∞–¥–∞–Ω–∏—è'
      case 'message': return '–°–æ–æ–±—â–µ–Ω–∏—è'
      case 'achievement': return '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è'
      default: return ''
    }
  }

  return (
    <div className={styles.container}>
      {/* Header */}
      <header className={styles.header}>
        <motion.button
          className={styles.backButton}
          onClick={() => router.back()}
          whileTap={{ scale: 0.95 }}
        >
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
            <path d="M15 18L9 12L15 6" stroke="white" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
          </svg>
        </motion.button>
        <div>
          <h1 className={styles.title}>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h1>
          {unreadCount > 0 && (
            <p className={styles.subtitle}>{unreadCount} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö</p>
          )}
        </div>
        {unreadCount > 0 && (
          <motion.button
            className={styles.markAllButton}
            onClick={markAllAsRead}
            whileTap={{ scale: 0.95 }}
          >
            <svg width="20" height="20" viewBox="0 0 20 20" fill="none">
              <path d="M5 10L8 13L15 6" stroke="#0A84FF" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
            </svg>
          </motion.button>
        )}
      </header>

      {/* Filters */}
      <div className={styles.filters}>
        {['all', 'schedule', 'homework', 'message', 'achievement'].map(type => (
          <motion.button
            key={type}
            className={`${styles.filterButton} ${filter === type ? styles.active : ''}`}
            onClick={() => setFilter(type as any)}
            whileTap={{ scale: 0.95 }}
          >
            {getFilterLabel(type)}
          </motion.button>
        ))}
      </div>

      {/* Content */}
      <div className={styles.content}>
        <AnimatePresence mode="popLayout">
          {filteredNotifications.map((notification, index) => (
            <motion.div
              key={notification.id}
              className={`${styles.notificationCard} ${notification.read ? styles.read : ''}`}
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -100 }}
              transition={{ delay: index * 0.03 }}
              layout
              onClick={() => markAsRead(notification.id)}
            >
              {!notification.read && <div className={styles.unreadIndicator} />}

              <div
                className={styles.notificationIcon}
                style={{ background: `${notification.color}33`, color: notification.color }}
              >
                {notification.icon}
              </div>

              <div className={styles.notificationContent}>
                <h3 className={styles.notificationTitle}>{notification.title}</h3>
                <p className={styles.notificationDescription}>{notification.description}</p>
                <span className={styles.notificationTime}>{notification.time}</span>
              </div>

              <motion.button
                className={styles.deleteButton}
                onClick={(e) => {
                  e.stopPropagation()
                  deleteNotification(notification.id)
                }}
                whileTap={{ scale: 0.9 }}
              >
                <svg width="20" height="20" viewBox="0 0 20 20" fill="none">
                  <path d="M15 5L5 15M5 5L15 15" stroke="#8E8E93" strokeWidth="2" strokeLinecap="round"/>
                </svg>
              </motion.button>
            </motion.div>
          ))}
        </AnimatePresence>

        {filteredNotifications.length === 0 && (
          <div className={styles.emptyState}>
            <div className={styles.emptyIcon}>üîî</div>
            <h3 className={styles.emptyTitle}>–ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h3>
            <p className={styles.emptyText}>
              –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            </p>
          </div>
        )}
      </div>

      {/* Settings Button */}
      <motion.button
        className={styles.settingsButton}
        onClick={() => alert('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')}
        whileHover={{ scale: 1.02 }}
        whileTap={{ scale: 0.98 }}
      >
        <svg width="20" height="20" viewBox="0 0 20 20" fill="none">
          <circle cx="10" cy="10" r="3" stroke="white" strokeWidth="1.5"/>
          <path d="M10 1V3M10 17V19M19 10H17M3 10H1M16.36 16.36L14.95 14.95M5.05 5.05L3.64 3.64M16.36 3.64L14.95 5.05M5.05 14.95L3.64 16.36" stroke="white" strokeWidth="1.5" strokeLinecap="round"/>
        </svg>
        <span>–ù–∞ÔøΩÔøΩ—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</span>
      </motion.button>
    </div>
  )
}
