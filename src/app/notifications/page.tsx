'use client'

import { useState } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { useRouter } from 'next/navigation'
import styles from './notifications.module.css'

interface Notification {
  id: number
  type: 'announcement' | 'grade' | 'message' | 'deadline' | 'event'
  title: string
  description: string
  time: string
  read: boolean
  color: string
  icon: string
}

const initialNotifications: Notification[] = [
  { id: 1, type: 'announcement', title: '–í–∞–∂–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', description: '–ó–∞–≤—Ç—Ä–∞ –≤—Å—Ç—Ä–µ—á–∞ —Å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è–º–∏ IT-–∫–æ–º–ø–∞–Ω–∏–π –≤ 14:00', time: '10 –º–∏–Ω –Ω–∞–∑–∞–¥', read: false, color: '#FF6B9F', icon: 'üì¢' },
  { id: 2, type: 'grade', title: '–ù–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞', description: '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑: 5 –±–∞–ª–ª–æ–≤ –∑–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É', time: '1 —á–∞—Å –Ω–∞–∑–∞–¥', read: false, color: '#C8FF00', icon: '‚≠ê' },
  { id: 3, type: 'message', title: '–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', description: '–ü—Ä–æ—Ñ. –ò–≤–∞–Ω–æ–≤: –ü–µ—Ä–µ–Ω–æ—Å –ª–µ–∫—Ü–∏–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞', time: '2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥', read: false, color: '#0A84FF', icon: 'üí¨' },
  { id: 4, type: 'deadline', title: '–ü—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –¥–µ–¥–ª–∞–π–Ω', description: '–°–¥–∞—á–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é —á–µ—Ä–µ–∑ 2 –¥–Ω—è', time: '3 —á–∞—Å–∞ –Ω–∞–∑–∞–¥', read: true, color: '#FFB76B', icon: '‚è∞' },
  { id: 5, type: 'event', title: '–ù–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', description: '–•–∞–∫–∞—Ç–æ–Ω –ø–æ AI –≤ —ç—Ç—É –ø—è—Ç–Ω–∏—Ü—É. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞!', time: '5 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥', read: true, color: '#8B7FFF', icon: 'üéâ' },
  { id: 6, type: 'grade', title: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞', description: '–í—ã –ø–æ–¥–Ω—è–ª–∏—Å—å –Ω–∞ 12 –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –∫—É—Ä—Å–∞!', time: '1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥', read: true, color: '#30D158', icon: 'üèÜ' },
  { id: 7, type: 'announcement', title: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è', description: '–ü–∞—Ä–∞ –ø–æ —Ñ–∏–∑–∏–∫–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ —Å 18 –Ω–∞ 19 –æ–∫—Ç—è–±—Ä—è', time: '1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥', read: true, color: '#FF6B9F', icon: 'üìÖ' },
  { id: 8, type: 'message', title: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å—Ç–∞—Ä–æ—Å—Ç—ã', description: '–°–±–æ—Ä –¥–µ–Ω–µ–≥ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–æ –∫–æ–Ω—Ü–∞ –Ω–µ–¥–µ–ª–∏', time: '2 –¥–Ω—è –Ω–∞–∑–∞–¥', read: true, color: '#0A84FF', icon: 'üí¨' }
]

export default function NotificationsPage() {
  const router = useRouter()
  const [notifications, setNotifications] = useState<Notification[]>(initialNotifications)
  const [filter, setFilter] = useState<'all' | 'unread'>('all')

  const filteredNotifications = filter === 'all'
    ? notifications
    : notifications.filter(n => !n.read)

  const unreadCount = notifications.filter(n => !n.read).length

  const markAsRead = (id: number) => {
    setNotifications(notifications.map(n =>
      n.id === id ? { ...n, read: true } : n
    ))
  }

  const markAllAsRead = () => {
    setNotifications(notifications.map(n => ({ ...n, read: true })))
  }

  const deleteNotification = (id: number) => {
    setNotifications(notifications.filter(n => n.id !== id))
  }

  return (
    <div className={styles.container}>
      {/* Header */}
      <header className={styles.header}>
        <motion.button
          className={styles.backButton}
          onClick={() => router.back()}
          whileTap={{ scale: 0.95 }}
        >
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
            <path d="M15 18L9 12L15 6" stroke="white" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
          </svg>
        </motion.button>
        <div>
          <h1 className={styles.title}>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h1>
          {unreadCount > 0 && (
            <p className={styles.subtitle}>{unreadCount} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö</p>
          )}
        </div>
        {unreadCount > 0 && (
          <motion.button
            className={styles.markAllButton}
            onClick={markAllAsRead}
            whileTap={{ scale: 0.95 }}
          >
            ‚úì
          </motion.button>
        )}
      </header>

      {/* Filters */}
      <div className={styles.filters}>
        <motion.button
          className={`${styles.filterButton} ${filter === 'all' ? styles.active : ''}`}
          onClick={() => setFilter('all')}
          whileTap={{ scale: 0.95 }}
        >
          –í—Å–µ
        </motion.button>
        <motion.button
          className={`${styles.filterButton} ${filter === 'unread' ? styles.active : ''}`}
          onClick={() => setFilter('unread')}
          whileTap={{ scale: 0.95 }}
        >
          –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ {unreadCount > 0 && `(${unreadCount})`}
        </motion.button>
      </div>

      {/* Notifications List */}
      <div className={styles.content}>
        <AnimatePresence>
          {filteredNotifications.map((notification, index) => (
            <motion.div
              key={notification.id}
              className={`${styles.notificationCard} ${!notification.read ? styles.unread : ''}`}
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: 20 }}
              transition={{ delay: index * 0.05 }}
              onClick={() => markAsRead(notification.id)}
            >
              <div className={styles.notificationIcon} style={{ background: `${notification.color}30`, color: notification.color }}>
                {notification.icon}
              </div>
              <div className={styles.notificationContent}>
                <div className={styles.notificationHeader}>
                  <h3 className={styles.notificationTitle}>{notification.title}</h3>
                  <span className={styles.notificationTime}>{notification.time}</span>
                </div>
                <p className={styles.notificationDescription}>{notification.description}</p>
              </div>
              {!notification.read && (
                <div className={styles.unreadDot} style={{ background: notification.color }} />
              )}
              <motion.button
                className={styles.deleteButton}
                onClick={(e) => {
                  e.stopPropagation()
                  deleteNotification(notification.id)
                }}
                whileTap={{ scale: 0.95 }}
              >
                <svg width="20" height="20" viewBox="0 0 20 20" fill="none">
                  <path d="M6 6L14 14M6 14L14 6" stroke="#8E8E93" strokeWidth="2" strokeLinecap="round"/>
                </svg>
              </motion.button>
            </motion.div>
          ))}
        </AnimatePresence>

        {filteredNotifications.length === 0 && (
          <div className={styles.emptyState}>
            <div className={styles.emptyIcon}>üîî</div>
            <h3 className={styles.emptyTitle}>–ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h3>
            <p className={styles.emptyText}>
              {filter === 'unread' ? '–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ—á–∏—Ç–∞–Ω—ã' : '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'}
            </p>
          </div>
        )}
      </div>
    </div>
  )
}

